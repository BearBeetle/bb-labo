<!DOCTYPE html>
<HTML>
<HEAD>
   <meta charset="UTF-8">
   <TITLE>BB Programming Lab.</TITLE>
</HEAD>
<BODY BACKGROUND="bcg_280.gif">
<A NAME="TOP_TOP"></A><FONT SIZE=-1>このページはNetscapeNavigator
2.0以降及びMicrosoft Internet Exploler 3.0以降で正常に見られます。</FONT>
<BR><FONT SIZE=-2>Solly,Japanese only</FONT>
<BR>
<HR>
<CENTER><BLINK><FONT COLOR="#3366FF"><FONT SIZE=-1>★ ＢＢ研究所 ★</FONT></FONT></BLINK></CENTER>
<CENTER><FONT COLOR="#3366FF"><FONT SIZE=+2>Netscape プラグインの作成法（実習）</FONT></FONT></CENTER>

<HR>
<BR>　「概要」では、話が見えない方が多いと思います。ここでは、Windows95用の簡単なプラグインを作成します。ここで、動作の一形態について理解し、より複雑なプラグイン開発の弾みにしましょう。

<P>　それでは、私の作ったサンプルプラグイン「BBTIF」を、<A HREF="obj/BBTIF001.lzh">ここ</A>からダウンロードして下さい。
<BR>このプラグインは、TIFF形式及びＢＭＰ形式のファイルを表示する機能を持っています。その為に、ニュートン（株）のＩｍａｇｅＫｉｔ４という画像ライブラリを使用します。これを購入（定価：３９，８００円）するか、<A HREF="http://www.newtone.co.jp/">ニュートン（株）のホームページ</A>に体験版があるので、これをダウンロードして使用して下さい。プラグインを動作させるだけでしたら、BBTIF001.LZHに付属のＤＬＬだけでＯＫです。
<BR>
<HR>
<H3><FONT COLOR="#3366FF">まずは、動かしてみましょう！</FONT></H3>

<UL>
<LI>ダウンロードしたBBTIF001.LZHを解凍して下さい。<BR>
すると、NPBTiffというディレクトリが作成されます。このサブディレクトリにDLLsがあります。
<LI>DLLsの中の、NPBTiff.dllが「BBTIF」をコンパイルしたオブジェクトです。これを、Navigator内のprogram\pluginsにコピーして下さい。
<LI>残りのDLL（ImgKit4ライブラリ）を、\windows\systemにコピーして下さい。
<LI>Sampleサブディレクトリ内にある、Sample.htmをNetscapeでロードして下さい。
</UL>

TIFFイメージ（鳥）と、BMPイメージ（BBロゴ）が表示できたでしょうか？<BR>
それでは、このプラグインのソースについて説明していきます。<BR>
<HR>
<H3><FONT COLOR="#3366FF">１．プロジェクトの作成</FONT></H3>
まず、Visual C++ ver5.0を使用して、プロジェクトを作成します。
<BR>
<UL>
<LI>ファイル(F)→新規作成(N)から、「プロジェクト」の「Win32 Dynamic-Link Library」を指定して、「NPBTiff」を作成します。<BR>
※プロジェクトの名前は、「NP」ではじまり、トータル８文字以内に設定します。
</UL>

<HR>
<H3><FONT COLOR="#3366FF">２．プラグインＳＤＫから、必要なファイルを集める</FONT></H3>

Netscape社のＳＤＫ（詳細は「概要」をご参照下さい）から、必要なヘッダファイルと、テンプレートを集めます。<BR>
以下のファイルを、プロジェクトのディレクトリにコピーします。
<UL>jri.h, jri_md.h, jritypes.h, npapi.h, npupp.h, Npwin.cpp</UL>
また、テンプレートファイルWintemp.cをリネームして、WinCallBack.cを作成します。<BR>
※名前は何でもかまいません。<BR>
これらのファイルをプロジェクトに追加します。
<BR>
<P>
<HR>
<H3><FONT COLOR="#3366FF">３．リソースファイルを作る</FONT></H3>
リソースファイル（NPBTiff.rc）を作成し、プロジェクトに追加します。
<UL>
	<LI>このリソースにバージョン情報を追加します。<BR>
	<A NAME="ABOUT_RESOURCE">
	※このとき、「Block Header」のプロパティを、「英語(U.S.)」及び「Windows,複数言語」に指定します。<BR>
	<LI>これを一旦クローズし、NPBTiff.rcをテキストエディタで開き、以下の２行を追加します。<BR>
	 VALUE "FileExtents", "tiff|tif|bmp|dib\0"<BR>
	 VALUE "FileOpenName", "TIFF Image(*.tiff)|TIFF Image(*.tif)|BMP Image(*.bmp)|DIB Image(*.dib)\0"<BR>
	 VALUE "MIMEType", "image/tiff|image/tif|image/bmp|image/dib\0"<BR>
	<UL>これらの値は、Navigatorがプラグインの情報を知るためのもので、FileExtentsとFileOpenNameは、プラグインの扱うファイルの拡張子とその説明、MIMETypeはMIMEタイプを記述します。一つのプラグインが複数のデータを扱う場合は、各ファイルの拡張子とMIMEタイプを"|"で区切って記述します。</UL>
</UL>
<HR>

<H3><FONT COLOR="#3366FF">４．ImageKit4のAPIを実装する</FONT></H3>
ImageKit4(画像ライブラリ）のサンプルを参考に、APIをつくります（ImgKitApi.c,ImgKitApi.h）。Imgkdef.hとImagekit.hはサンプルをそのまま利用します。これらの説明については省略します。詳しくはソースファイルを参照して下さい。
<BR>BBTIFプラグインでは、以下の関数のみ使用します。
<UL>
	<LI>LoadImgKitDll()･･････････DLLのロード
	<LI>UnLoadImgKitDll()････････DLLのアンロード
	<LI>ImgKitFileLoad()･････････ファイルからイメージをリード
	<LI>ImgKitMemFree()･･････････イメージの解放
	<LI>ImgKitDisplay()･･････････イメージ（画像）の描画
</UL>
ImgKitApi.cをプロジェクトに追加して、全ての準備は整いました。あとは、WinCallBack.cを編集してプラグインを完成させるだけです。<BR>
<HR>
<H3><FONT COLOR="#3366FF">５．プラグインを実装する</FONT></H3>
サンプルソースでは、コメントを和訳していますが、実質的に変更したのは以下の内容のみです。<BR>
<UL>
	<LI>プライベートインスタンスを定義しているPluginInstance構造体に、ImageKit4のハンドルhImgKitを追加します</LI>
	<LI>NPP_Initializeに、以下の３行を追加します。</LI>
	<UL>
		// ImageKitのロード<BR>
		if(LoadImgKitDll()==FALSE)
		　　　　 return NPERR_GENERIC_ERROR;
	</UL>
	<LI>NPP_Shutdownに、以下の２行を追加します。
	<UL>
		// ImageKitのアンロード<BR>
		UnLoadImgKitDll();
</UL>

<LI>NPP_Destroyに以下の２行を追加します。</LI>
<UL>
	if (This->hImgKit != 0)<BR>
	　　　　 ImgKitMemFree(This->hImgKit);</UL>
	<LI>NPP_NewStreamに以下の２行を追加します。
	<UL>
	// File Only Modeに設定する<BR>
	　　　　 *stype=NP_ASFILEONLY;</UL>
	<LI>NPP_StreamAsFileに以下の行を追加します。
	<UL>
		// ImgKitによりファイルロード<BR>
		if (This->hImgKit != 0)<BR>
		　　　　 ImgKitMemFree(This->hImgKit);<BR>
		This->hImgKit = ImgKitFileLoad((char *)fname, "", "");<BR>
		// 再描画<BR>
		InvalidateRect( This->fhWnd, NULL, TRUE );
	</UL>
	<LI>ウィンドウプロシージャ（PlginWindowProc）を以下のように書き換えます。
	<UL>
		PluginInstance* This = (PluginInstance*) GetProp(hWnd, gInstanceLookupString);<BR>
		PAINT	STRUCT　ps;<BR>
		switch( Msg ) {<BR>
		　　　　 case WM_PAINT: {<BR>
		　　　　 // 再描画<BR>
		　　　　 BeginPaint(hWnd, &amp;ps);<BR>
		　　　　 if (This->hImgKit != 0)<BR>
		　　　　 　　　　 ImgKitDisplay(hWnd, This->hImgKit, FALSE);<BR>
		　　　　 else{<BR>
		　　　　 　　　　 TextOut(hWnd,0,0,"Cannot Open Error",17);<BR>
		　　　　 　　　　 EndPaint(hWnd, &amp;ps);<BR>
		　　　　 　　　　 break;<BR>
		　　　　 }<BR>
		　　　　 default:<BR>
		　　　　 　　　　 This->fDefaultWindowProc( hWnd, Msg, wParam, lParam);<BR>
		}<BR>
		return 0;
	</UL>
	<BR>
	変更点はこれだけです。<BR>
	あとはビルドすれば完成です。
</UL>

<HR><H3><FONT COLOR="#3366FF">６．動作の説明</FONT></H3>
<FONT COLOR="#000000">
　このプラグインは、ファイルモードで作成しているため非常にシンプルになっています。ファイルモードは、NetscapeがURLからダウンロードしたデータをすべてローカル・キャッシュにダウンロードして、その後、</FONT>
NPP_StreamAsFileを呼出し、キャッシュファイルへのパスをプラグインに渡します。
<BR>　全体の流れは以下のようになります。
<BR>
<UL>
	<LI>プラグインがロードされると、まずNPP_Initializeが呼び出される。このとき、LoadImgKitDll()を呼び出してImageKit4ライブラリをロードする。</LI>
	<LI>つぎに、画像データに対応してインスタンスが作成され、NPP_Newが呼び出されます。ここでは、テンプレートの処理のみで、変更は行っていません。</LI>
	<LI>つづいて画像データ表す、ストリームが作成され、NPP_NewStreamが呼び出されます。このとき、ストリームの処理モードを設定できますので、ファイルモードにするため、スタイル（*stype）をNP_ASFILEONLYに設定します。</LI>
	<LI>ストリーム（画像データ）が全てローカルキャッシュに読み込まれると、NPP_StreamAsFileが呼び出されます。</LI>
	<BR>ここで、ImageKit4のImgKitFileLoadを呼出し、画像データを画像ライブラリに読み込みます。
	<LI>この直後、NPP_DestroyStreamを呼出し、その後ストリームが破棄されます。このときは、テンプレートの処理のままで、変更は加えません。（ストリームが全てプラグインに送られると、Navigatorはストリームを破棄します。この為インスタンスのプライベートデータにストリームの内容をストックしておく必要があります）。</LI>
	<LI>ウィンドウイベントが発生すると随時、ウィンドウプロシージャ（PlginWindowProc）が呼び出されます。今回作成したプラグインでは、描画（WM_PAINT）のみハンドルし、ImgKitDisplayを使って再描画を行っています。</LI>
	<LI>ウィンドウをクローズするときには、NPP_Destroyが呼び出されます。このときに、ImageKit（画像ライブラリ）のメモリを解放し、画像データを破棄します。</LI>
	<LI>最後にプラグインがアンロードされるときに、NPP_Shutdownが呼び出されます。このとき、UnLoadImgKitDll()をよびだして、ImageKit4をアンロードします。</LI>
</UL>

<HR>
<H3><FONT COLOR="#3366FF">７．終わりに</FONT></H3>
（半日で作った）簡単なプラグインを通じて、プラグインの基本について説明しました。私自身、いまのところ知識はこの程度しか持っていませんが、
あと印刷やメニューをサポートすることにより立派なプラグインになると思います。<BR>
<A NAME="FOR_IE">
　尚ＩＥは、ActiveXの仕様が一般的ですが、一応Netscape v.2のプラグインにも対応しています。<BR>
この為、今回作成したプラグインの場合、NPP_NewStreamで*stype=NP_ASFILEONLY;には対応していない(v.3機能のため）ので、<BR>
ここを、*stype=NP_ASFILE;にすれば、ＩＥ３でも動作するはずです（試してはいません）。
<P>
<HR>
【改訂記録】<BR>
98/04/05版：公開<BR>
98/04/20版：<UL>
「３．リソースファイルを作る」に<A HREF="#ABOUT_RESOURCE">リソースの言語についての記述</A>追加<BR>
「７．終わりに」に<A HREF="#FOR_IE">ＩＥについての記述</A>追加<BR>
</UL>
<HR>
<P><A HREF="index.htm">[ホームへ戻る］</A>
<HR><FONT SIZE=-1>Copyright (c) 1997-1999, BearBeetle, Allrights reserved.</FONT>
</BODY>
</HTML>
