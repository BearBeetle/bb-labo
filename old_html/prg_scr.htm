<!DOCTYPE html>
<HTML>
<HEAD>
   <meta charset="UTF-8">
   <TITLE>BB Programming Lab.</TITLE>
</HEAD>
<BODY BACKGROUND="bcg_280.gif">
<A NAME="TOP_TOP"></A><FONT SIZE=-1>このページはNetscapeNavigator
2.0以降及びMicrosoft Internet Exploler 3.0以降で正常に見られます。</FONT>
<BR><FONT SIZE=-2>Solly,Japanese only</FONT>
<BR>
<HR>
<CENTER><BLINK><FONT COLOR="#3366FF"><FONT SIZE=-1>★ ＢＢ研究所 ★</FONT></FONT></BLINK></CENTER>
<CENTER><FONT COLOR="#3366FF"><FONT SIZE=+2>MFCベースのスクリーンセーバー</FONT></FONT></CENTER>
<H3><FONT COLOR="#3366FF">１．はじめに</FONT></H3>
スクリーンセーバーについては、結構資料が出ているので今まで触れていませんでしたが、このたび新作ソフトを作るにあたり、その初期段階をテンプレートとしてまとめましたので、ここで公開したいと思います。<BR>

VBやDelphiユーザには大変申し訳ありませんが、今回もまたまた，VisualC++(ver6.0)を対象としています。<BR>
<HR>
<H3><FONT COLOR="#3366FF">２．スクリーンセーバー用ライブラリ</FONT></H3>
VisualC++でスクリーンセーバーを扱う場合、専用のライブラリ( Scrnsave.lib/Scrnsavw.lib )が用意されています。これはMFCを使わずWIN32に直接アクセスするタイプのアプリケーション用です。<BR>
オンラインヘルプ（MSDNライブラリ)で、キーワード(N)を「Screen Saver Library」にしてサーチすれば、使用方法が載っています。<BR>
但し、英文のため、英語の苦手な人には（私も含め）ちょっととっつきにくいかもしれません。そのような人は、昔のVisualC++(ver2.0)のヘルプに日本語で書いてあったので、持っている人からその部分を見せてもらうのも一つの手です。<BR>
※この方法は私自身結構気に入っていて、拙作「ヴィデオ・スクリーン」はこの方法で作成しています。<BR>

<HR>
<H3><FONT COLOR="#3366FF">３．ＭＦＣからスクリーンセーバーを使う方法</FONT></H3>
ＭＦＣ(Microsoft Foundation Classes）は、私自身あまり好きではないのですが、ＯＣＸが使い易く、各種ライブラリもＭＦＣ用に作成されたものが多くなってきたので、最近は避けては通れなくなってきました。<BR>
使い方については、オンラインヘルプ（MSDNライブラリ)の、<BR>
以下のページに記述されています。<BR>

＋技術文書<BR>
　＋Tecnical Articles<BR>
　　＋Windows Platform<BR>
　　　＋Windows Managiment<BR>
　　　　＋Creating 32-Bit Screen Savers with Visual C++ and MFC<BR>
<BR>
しかしここに載っているサンプルは力技的なところがあり、あまり美しくありません（特に、WindowProcを使っているあたり）。<BR>
また、これとは別にＶＣ＋＋のＣＤ－ＲＯＭには、ＭＦＣを使ったスクリーンセーバーのサンプルソースも含まれています。このソースは綺麗なのですが、かなり完成度が高く、またオリジナルの描画クラスを親クラスとしてスクリーンセーバクラスを作成しているため、少々見づらくなっています。<BR>
このサンプルソースを参考に、まったく新規にテンプレートを作成しました。<BR>
このテンプレートは、新作ソフトを作るにあたりその初期段階を一般的にまとめたものです。<BR>
<BR>
<HR>
<H3><FONT COLOR="#3366FF">４．テンプレートの説明</FONT></H3>
まずテンプレートを、<A HREF="obj/ScrSampl.lzh">ここ</A>からダウンロードしてください。<BR>

テンプレートの説明の前に、スクリーンセーバ起動時のスイッチについて説明します。<BR>
<BR>
<TABLE BORDER>
<TR><TD>/s, -s ,s</TD><TD>スクリーンセーバー</TD></TR>
<TR><TD>/p, -p ,p</TD><TD>プレビュー</TD></TR>
<TR><TD>/c, -c ,c</TD><TD>設定ダイアログ表示(親ウィンドウのある場合<BR>現行アクティブなウィンドウが親ウィンドウ</TD></TR>
<TR><TD>無し     </TD><TD>設定ダイアログ表示(親ウィンドウの無い場合）</TD></TR>
</TABLE>
上記スイッチは、"__argv[1]"に渡されます。<BR><BR>

さて、テンプレートの説明に移ります。<BR>
ダウンロードしたファイルを展開して、「DsScr.scr」を「\windows\system」の下にコピーして下さい。<BR>
そして「プレビュー」で実行してみてください<BR>
このテンプレートは、一定間隔（0.5秒）で、赤系から始まり、いろんな色で画面全体を塗りつぶすスクリーンセーバーになっています。<BR>
MFC AppWizerdによりダイアログボックスベースで作成しました。<BR>
本来作成されるダイアログボックスは、スクリーンセーバーの設定用ダイアログに使用しますが、このテンプレートではウィザードそのままで、特に何かを設定できるわけではありません。<BR>
<BR>
スクリーンセーバーには、上記のように、スクリーンセーバーモードの他に、設定時の小さな画面に表示するためのプレビュー、設定ダイアログ表示（親ウィンドウ有り／無し）の４種類があります。それぞれ渡される起動スイッチが異なります。<BR>
テンプレートでは、CDsScrApp::InitInstance()の部分でこれを行っています。<BR>
<TABLE  BORDER=1 cellspacing="0" bgcolor="#C0C0E0" >
<TR><TD>
<FONT SIZE=-1>
<PRE>
BOOL MatchOption(LPTSTR lpsz, LPTSTR lpszOption)
{
	if (lpsz[0] == '-' || lpsz[0] == '/')
		lpsz++;
	if (_memicmp(lpsz, lpszOption,1) == 0)
		return TRUE;
	return FALSE;
}


BOOL CDsScrApp::InitInstance()
{
	// 標準的な初期化処理
	// もしこれらの機能を使用せず、実行ファイルのサイズを小さくしたけ
	//  れば以下の特定の初期化ルーチンの中から不必要なものを削除して
	//  ください。

#ifdef _AFXDLL
	Enable3dControls();			// 共有 DLL 内で MFC を使う場合はここをコールしてください。
#else
	Enable3dControlsStatic();	// MFC と静的にリンクする場合はここをコールしてください。
#endif
	if (__argc == 1 || MatchOption(__argv[1], _T("c"))){


		CDsScrDlg dlg;
		m_pMainWnd = &dlg;
		int nResponse = dlg.DoModal();
		if (nResponse == IDOK)
		{
			// TODO: ダイアログが <OK> で消された時のコードを
			//       記述してください。
		}
		else if (nResponse == IDCANCEL)
		{
			// TODO: ダイアログが <ｷｬﾝｾﾙ> で消された時のコードを
			//       記述してください。
		}
	}
	else if(MatchOption(__argv[1], _T("p"))){
		// プレビュー

		return TRUE;	// TRUEで戻るらしい
	}
	else if (MatchOption(__argv[1], _T("s")))
	{
		CSaver* pWnd = new CSaver;
		pWnd->CreateEx();
		m_pMainWnd = pWnd;
		return TRUE;	// TRUEで戻るらしい
	}
	return FALSE;
}
</PRE>
</FONT>
</TD></TR>
</TABLE>
上記のCDsScrApp::MatchOption()が文字列を比較する部分です。<BR>
CDsScrApp::InitInstance()で、これを呼び出しスイッチの切り分けをしています<BR>
上記例では、スイッチ無し及び"/c"のいずれのときも親ウィンドウ無しで設定ダイアログを作成していますが、より正確を期すのなら、"/c"の場合のみ、ウィンドウオブジェクト作成時にアクティブウィンドウ(CWnd::GetActiveWindow())を指定して作成すると良いでしょう。<BR><BR>
設定ダイアログボックスの作成は、通常のダイアログボックスの作成とまったく同じですので説明を省略します<BR><BR>
スクリーンセーバウィンドウは、CSaverクラス(Saver.cpp)で記述しています<BR>
この内容についても、ソースを見ていただくことで説明は省略します<BR>
スクリーンセーバーの機能としては、少し特殊なウィンドウを作成し、マウス移動等のイベントが発生したら、ウィンドウを破棄するようになっています。<BR>
このテンプレートはそれだけではさびしいので、一応タイマーを作って、一定期間毎に画面を塗りつぶしなおしています。<BR><BR>
<TABLE  BORDER=1 cellspacing="0" bgcolor="#C0C0E0" >
<TR><TD>
<FONT SIZE=-1>
<PRE>
BOOL CSaver::CreateEx() 
{
	CRect rect(0, 0, ::GetSystemMetrics(SM_CXSCREEN),
		::GetSystemMetrics(SM_CYSCREEN));

	// カーサーを設定せずにクラスを登録します
	if (m_lpszClassName == NULL)
	{
    	m_lpszClassName = AfxRegisterWndClass(CS_HREDRAW|CS_VREDRAW,
			::LoadCursor(AfxGetResourceHandle(), 
			MAKEINTRESOURCE(IDC_NULLCURSOR)));
	}

	 BOOL fRet=CWnd::CreateEx(WS_EX_TOPMOST, m_lpszClassName, _T(""), WS_VISIBLE|WS_POPUP, 
		rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, 
		NULL, NULL, NULL );

	 SetTimer(1, 500, NULL);	// 500ms(0.5秒)毎にイベントの発生するタイマーを設定

	 return fRet;
}
・・・
void CSaver::OnDestroy() 
{
	KillTimer(1);
	PostQuitMessage(0);
	CWnd::OnDestroy();
}
・・・
void CSaver::OnPaint() 
{
	CPaintDC dc(this); // 描画用のデバイス コンテキスト
	
	// TODO: この位置にメッセージ ハンドラ用のコードを追加してください

	// 以下画面を塗りつぶすルーチン
	CRect rect;
	GetClientRect(&rect);
	dc.FillSolidRect(&rect,m_stBackColor);

	// 描画用メッセージとして CWnd::OnPaint() を呼び出してはいけません
}

void CSaver::OnTimer(UINT nIDEvent) 
{
	// TODO: この位置にメッセージ ハンドラ用のコードを追加するかまたはデフォルトの処理を呼び出してください
	if(nIDEvent){
		// 背景色をいろんな色に設定する
		m_stBackColor+=0x10;
		if(m_stBackColor>0xffffff)
			m_stBackColor=0;
		// 背景を塗りつぶす
		CRect rect;
		GetClientRect(&rect);
		InvalidateRect(FALSE);

	}
	
	CWnd::OnTimer(nIDEvent);
}

</PRE>
</FONT>
</TD></TR>
</TABLE>
<BR>
<BR>
【注意】<BR>
プロジェクトの設定（「プロジェクト(P)」→「設定(S)」）で、「デバック」タブの「プログラムの引数」に「/s」を入れると、スクリーンセーバーモードで起動されるので、この部分のデバックをすることが出来ます。<BR>
しかし、テンプレートそのままでは、スクリーンセーバ起動時のデバックが出来ません。<BR>
ブレークポイントを張ると、その続行直後にスクリーンセーバーが終了してまうからです。<BR>
これを回避するためには、条件コンパイルとして、デバック時はPostMessage(WM_CLOSE);の行をコンパイルしないようにします（しかし、全てをコメントアウトするとプログラムが終了しなくなるので、 CSaver::OnLButtonDown()くらいはそのままにしておきましょう）。また、CWnd::CreateWindowEx()呼び出し時のWS_EX_TOPMOST指定を0にする必要があります。これはスクリーンセーバウィンドウが最前に来るとブレークしても、VisualC++の画面が最前にこれないからです。<BR>
<BR>
<HR>
<H3><FONT COLOR="#3366FF">５．おわりに</FONT></H3>
今回、テンプレートの提示だけで、あまりスクリーンセーバー自身については解説していません。<BR>
しかし、ポイントは起動時のスイッチの切り分け及び、テンプレート通りのウィンドウが作成されれば、殆ど普通のウィンドウソフトと何ら作りは代わりません（キー入力やマウス入力が出来ないので、タイマーイベントにより、自発的に動作させる必要はありますが…）。<BR>
この、テンプレートを元に又は参考にして、オリジナルのスリーンセーバーをどんどん作成していきましょう！<BR>
<HR>
<P><A HREF="index.htm">[ホームへ戻る］</A>
<BR>
【改訂記録】<BR>
2000/05/27版：公開<BR>
<HR><FONT SIZE=-1>Copyright (c) 1997-2000, BearBeetle, Allrights reserved.</FONT>
</BODY>
</HTML>
